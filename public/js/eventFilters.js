class EventFilters {
    constructor() {
        this.filters = {
            placeId: localStorage.getItem('orgId'),
            dateFrom: '',
            dateTo: '',
            statuses: [],
            eventType: '',
            priceMin: '',
            priceMax: '',
            availableSpots: '',
            search: '',
            page: 0,
            size: 5,
            sort: 'date_time,desc'
        };

        this.init();
    }

    init() {
        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.createFilterUI();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.initEventListeners();
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        this.loadSavedFilters();
        this.filters.placeId = localStorage.getItem('orgId');

    }

    createFilterUI() {
        const filterContainer = document.createElement('div');
        filterContainer.className = 'filters-container';
        filterContainer.innerHTML = `
            <div class="filters-panel">
                <div class="filters-header">
                    <h3>–§–∏–ª—å—Ç—Ä—ã</h3>
                    <button class="toggle-filters-btn" onclick="eventFilters.toggleFilters()">
                        <span class="filter-icon">üîç</span>
                    </button>
                </div>
                <div class="filters-body" id="filtersBody">
                    <div class="filters-grid">
                        <div class="filter-group">
                            <label>–ü–æ–∏—Å–∫</label>
                            <div class="search-input-wrapper">
                                <input type="text" 
                                       id="searchFilter" 
                                       placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é"
                                       class="search-input">
                                <span class="search-icon">üîç</span>
                            </div>
                        </div>
                        
                        <div class="filter-group">
                            <label>–ü–µ—Ä–∏–æ–¥</label>
                            <div class="date-range-inputs">
                                <input type="date" id="dateFromFilter" class="date-input">
                                <span class="date-separator">-</span>
                                <input type="date" id="dateToFilter" class="date-input">
                            </div>
                        </div>

                        <div class="filter-group">
                            <label>–°—Ç–∞—Ç—É—Å</label>
                            <select id="statusFilter" class="select-input">
                                <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                                <option value="OPEN">–û—Ç–∫—Ä—ã—Ç—ã–µ</option>
                                <option value="COMPLETED">–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ</option>
                                <option value="CANCELLED">–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ</option>
                                <option value="EXPIRED">–ò—Å—Ç—ë–∫—à–∏–µ</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</label>
                            <select id="eventTypeFilter" class="select-input">
                                <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
                                <option value="TENNIS">–¢–µ–Ω–Ω–∏—Å</option>
                                <option value="FOOTBALL">–§—É—Ç–±–æ–ª</option>
                                <option value="BASKETBALL">–ë–∞—Å–∫–µ—Ç–±–æ–ª</option>
                                <option value="VOLLEYBALL">–í–æ–ª–µ–π–±–æ–ª</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label>–¶–µ–Ω–∞ (—Å—É–º)</label>
                            <div class="price-range-inputs">
                                <input type="number" 
                                       id="priceMinFilter" 
                                       placeholder="–û—Ç"
                                       class="price-input">
                                <span class="price-separator">-</span>
                                <input type="number" 
                                       id="priceMaxFilter" 
                                       placeholder="–î–æ"
                                       class="price-input">
                            </div>
                        </div>

                        <div class="filter-group">
                            <label>–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç (–º–∏–Ω–∏–º—É–º)</label>
                            <input type="number" 
                                   id="availableSpotsFilter" 
                                   min="1" 
                                   placeholder="–ú–∏–Ω. –∫–æ–ª-–≤–æ –º–µ—Å—Ç"
                                   class="number-input">
                        </div>
                    </div>

                    <div class="active-filters" id="activeFilters"></div>
                    
                    <div class="filters-actions">
                        <button class="reset-filters-btn" onclick="eventFilters.resetFilters()">
                            –°–±—Ä–æ—Å–∏—Ç—å
                        </button>
                        <button class="apply-filters-btn" onclick="eventFilters.applyFilters()">
                            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addStyles();

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ DOM
        const eventsSection = document.getElementById('eventsSection');
        const eventsList = document.getElementById('eventsList');
        eventsSection.insertBefore(filterContainer, eventsList);
    }

    addStyles() {
        const styles = `
            .filters-container {
                margin-bottom: 20px;
            }

            .filters-panel {
                background: white;
                border-radius: 12px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                overflow: hidden;
            }

            .filters-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 15px 20px;
                background: #f8f9fa;
                border-bottom: 1px solid #dee2e6;
            }

            .filters-header h3 {
                margin: 0;
                color: #495057;
                font-size: 1.1em;
            }

            .toggle-filters-btn {
                background: none;
                border: none;
                cursor: pointer;
                padding: 5px;
                color: #6c757d;
                transition: color 0.2s;
            }

            .toggle-filters-btn:hover {
                color: #495057;
            }

            .filters-body {
                padding: 20px;
            }

            .filters-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 15px;
                margin-bottom: 20px;
            }

            .filter-group {
                display: flex;
                flex-direction: column;
                gap: 8px;
            }

            .filter-group label {
                color: #495057;
                font-weight: 500;
                font-size: 0.9em;
            }

            .search-input-wrapper {
                position: relative;
            }

            .search-input {
                width: 100%;
                padding: 8px 35px 8px 12px;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                font-size: 0.9em;
            }

            .search-icon {
                position: absolute;
                right: 10px;
                top: 50%;
                transform: translateY(-50%);
                color: #adb5bd;
            }

            .date-range-inputs,
            .price-range-inputs {
                display: flex;
                align-items: center;
                gap: 10px;
            }

            .date-input,
            .price-input,
            .select-input,
            .number-input {
                padding: 8px 12px;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                font-size: 0.9em;
                width: 100%;
            }

            .date-separator,
            .price-separator {
                color: #adb5bd;
            }

            .active-filters {
                display: flex;
                flex-wrap: wrap;
                gap: 8px;
                margin-bottom: 15px;
                min-height: 30px;
            }

            .filter-tag {
                display: inline-flex;
                align-items: center;
                gap: 5px;
                padding: 4px 10px;
                background: #e9ecef;
                border-radius: 15px;
                font-size: 0.85em;
                color: #495057;
            }

            .filter-tag button {
                border: none;
                background: none;
                color: #dc3545;
                cursor: pointer;
                padding: 0 3px;
                font-size: 1.1em;
                line-height: 1;
            }

            .filter-tag button:hover {
                color: #c82333;
            }

            .filters-actions {
                display: flex;
                justify-content: flex-end;
                gap: 10px;
                padding-top: 15px;
                border-top: 1px solid #dee2e6;
            }

            .reset-filters-btn,
            .apply-filters-btn {
                padding: 8px 16px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-weight: 500;
                transition: background-color 0.2s;
            }

            .reset-filters-btn {
                background: #e9ecef;
                color: #495057;
            }

            .reset-filters-btn:hover {
                background: #dee2e6;
            }

            .apply-filters-btn {
                background: #28a745;
                color: white;
            }

            .apply-filters-btn:hover {
                background: #218838;
            }

            @media (max-width: 768px) {
                .filters-grid {
                    grid-template-columns: 1fr;
                }

                .date-range-inputs,
                .price-range-inputs {
                    flex-direction: column;
                }

                .date-separator,
                .price-separator {
                    display: none;
                }
            }
        `;

        const styleSheet = document.createElement('style');
        styleSheet.textContent = styles;
        document.head.appendChild(styleSheet);
    }

    initEventListeners() {
        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('searchFilter');
        searchInput.addEventListener('input', debounce((e) => {
            this.filters.search = e.target.value;
            this.updateActiveFilters();
        }, 500));

        // –î–∞—Ç—ã
        const dateFromInput = document.getElementById('dateFromFilter');
        const dateToInput = document.getElementById('dateToFilter');
        dateFromInput.addEventListener('change', (e) => {
            this.filters.dateFrom = e.target.value;
            this.updateActiveFilters();
        });
        dateToInput.addEventListener('change', (e) => {
            this.filters.dateTo = e.target.value;
            this.updateActiveFilters();
        });

        // –°—Ç–∞—Ç—É—Å
        const statusSelect = document.getElementById('statusFilter');
        statusSelect.addEventListener('change', (e) => {
            this.filters.statuses = [e.target.value];
            this.updateActiveFilters();
        });

        // –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
        const eventTypeSelect = document.getElementById('eventTypeFilter');
        eventTypeSelect.addEventListener('change', (e) => {
            this.filters.eventType = e.target.value;
            this.updateActiveFilters();
        });

        // –¶–µ–Ω–∞
        const priceMinInput = document.getElementById('priceMinFilter');
        const priceMaxInput = document.getElementById('priceMaxFilter');
        priceMinInput.addEventListener('input', debounce((e) => {
            this.filters.priceMin = e.target.value;
            this.updateActiveFilters();
        }, 500));
        priceMaxInput.addEventListener('input', debounce((e) => {
            this.filters.priceMax = e.target.value;
            this.updateActiveFilters();
        }, 500));

        // –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
        const availableSpotsInput = document.getElementById('availableSpotsFilter');
        availableSpotsInput.addEventListener('input', debounce((e) => {
            this.filters.availableSpots = e.target.value;
            this.updateActiveFilters();
        }, 500));
    }

    updateActiveFilters() {
        const activeFiltersContainer = document.getElementById('activeFilters');
        let activeFiltersHtml = '';

        if (this.filters.search) {
            activeFiltersHtml += this.createFilterTag('–ü–æ–∏—Å–∫', this.filters.search, 'search');
        }
        if (this.filters.dateFrom || this.filters.dateTo) {
            const dateRange = `${this.filters.dateFrom || '–Ω–∞—á–∞–ª–∞'} - ${this.filters.dateTo || '–∫–æ–Ω—Ü–∞'}`;
            activeFiltersHtml += this.createFilterTag('–ü–µ—Ä–∏–æ–¥', dateRange, 'date');
        }
        if (this.filters.statuses.length > 0) {
            activeFiltersHtml += this.createFilterTag('–°—Ç–∞—Ç—É—Å', this.getStatusText(this.filters.statuses[0]), 'status');
        }
        if (this.filters.eventType) {
            activeFiltersHtml += this.createFilterTag('–¢–∏–ø', this.filters.eventType, 'eventType');
        }
        if (this.filters.priceMin || this.filters.priceMax) {
            const priceRange = `${this.filters.priceMin || '0'} - ${this.filters.priceMax || '‚àû'} —Å—É–º`;
            activeFiltersHtml += this.createFilterTag('–¶–µ–Ω–∞', priceRange, 'price');
        }
        if (this.filters.availableSpots) {
            activeFiltersHtml += this.createFilterTag('–ú–µ—Å—Ç –æ—Ç', this.filters.availableSpots, 'availableSpots');
        }

        activeFiltersContainer.innerHTML = activeFiltersHtml;
    }

    createFilterTag(label, value, filterKey) {
        return `
            <div class="filter-tag">
                ${label}: ${value}
                <button onclick="eventFilters.removeFilter('${filterKey}')">&times;</button>
            </div>
        `;
    }

    removeFilter(filterKey) {
        if (filterKey === 'date') {
            this.filters.dateFrom = '';
            this.filters.dateTo = '';
            document.getElementById('dateFromFilter').value = '';
            document.getElementById('dateToFilter').value = '';
        } else if (filterKey === 'price') {
            this.filters.priceMin = '';
            this.filters.priceMax = '';
            document.getElementById('priceMinFilter').value = '';
            document.getElementById('priceMaxFilter').value = '';
        } else {
            this.filters[filterKey] = '';
            document.getElementById(filterKey + 'Filter').value = '';
        }
        this.updateActiveFilters();
        this.applyFilters();
    }

    resetFilters() {
        this.filters = {
            placeId: localStorage.getItem('orgId'),
            dateFrom: '',
            dateTo: '',
            statuses: [],
            eventType: '',
            priceMin: '',
            priceMax: '',
            availableSpots: '',
            search: '',
            page: 0,
            size: 5,
            sort: 'date_time,desc'
        };

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
        document.querySelectorAll('.filters-panel input, .filters-panel select').forEach(input => {
            input.value = '';
        });

        this.updateActiveFilters();
        this.applyFilters();
        this.saveFilters();
    }

    applyFilters() {
        this.filters.page = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.saveFilters();
        loadEvents(0); // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
    }

    getStatusText(status) {
        const statuses = {
            'OPEN': '–û—Ç–∫—Ä—ã—Ç—ã–µ',
            'COMPLETED': '–ó–∞–≤–µ—Ä—à–∏—Ç—å',
            'CANCELLED': '–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ',
            'EXPIRED': '–ò—Å—Ç—ë–∫—à–∏–µ',
            
        };
        return statuses[status] || status;
    }

    toggleFilters() {
        const filtersBody = document.getElementById('filtersBody');
        filtersBody.style.display = filtersBody.style.display === 'none' ? 'block' : 'none';
    }

    saveFilters() {
        localStorage.setItem('eventFilters', JSON.stringify(this.filters));
    }

    loadSavedFilters() {
        const savedFilters = localStorage.getItem('eventFilters');
        if (savedFilters) {
            this.filters = { ...this.filters, ...JSON.parse(savedFilters) };
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
            if (this.filters.search) document.getElementById('searchFilter').value = this.filters.search;
            if (this.filters.dateFrom) document.getElementById('dateFromFilter').value = this.filters.dateFrom;
            if (this.filters.dateTo) document.getElementById('dateToFilter').value = this.filters.dateTo;
            if (this.filters.statuses.length > 0) document.getElementById('statusFilter').value = this.filters.statuses[0];
            if (this.filters.eventType) document.getElementById('eventTypeFilter').value = this.filters.eventType;
            if (this.filters.priceMin) document.getElementById('priceMinFilter').value = this.filters.priceMin;
            if (this.filters.priceMax) document.getElementById('priceMaxFilter').value = this.filters.priceMax;
            if (this.filters.availableSpots) document.getElementById('availableSpotsFilter').value = this.filters.availableSpots;

            this.updateActiveFilters();
        }
    }

    setStatuses(statuses) {
        this.filters.statuses = Array.isArray(statuses) ? statuses : [statuses];
        this.saveFilters();
    }

    toggleStatus(status) {
        const index = this.filters.statuses.indexOf(status);
        if (index === -1) {
            this.filters.statuses.push(status);
        } else {
            this.filters.statuses.splice(index, 1);
        }
        this.saveFilters();
    }

    setSort(field, direction) {
        this.filters.sort = `${field},${direction.toLowerCase()}`;
        this.saveFilters();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤
let eventFilters; 